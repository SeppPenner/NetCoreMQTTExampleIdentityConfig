<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetCoreMQTTExampleIdentityConfig</name>
    </assembly>
    <members>
        <member name="T:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController">
            <summary>
                The claim controller class.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.autoMapper">
            <summary>
                The auto mapper.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.databaseContext">
            <summary>
                The database context.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.#ctor(Storage.MqttContext,AutoMapper.IMapper)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController" /> class.
            </summary>
            <param name="databaseContext">The database context.</param>
            <param name="autoMapper">The auto mapper service.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.GetClaims">
            <summary>
                Gets all claims.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets all claims.
            </remarks>
            <response code="200">Claims found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.GetClaimById(System.Int64)">
            <summary>
                Gets a claim by its id.
            </summary>
            <param name="claimId">
                The claim identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets a claim by its id.
            </remarks>
            <response code="200">Claims found.</response>
            <response code="404">Claim not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.CreateOrUpdateClaim(Storage.Dto.DtoCreateUpdateUserClaim)">
            <summary>
                Creates or updates a claim.
            </summary>
            <param name="createUserClaim">
                The create user claim.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Creates or updates a claim.
            </remarks>
            <response code="200">Claim created.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.UpdateClaim(System.Int64,Storage.Dto.DtoCreateUpdateUserClaim)">
            <summary>
                Updates a claim.
            </summary>
            <param name="claimId">
                The claim identifier.
            </param>
            <param name="updateUserClaim">
                The update user claim.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Updates a claim.
            </remarks>
            <response code="200">Claim updated.</response>
            <response code="404">Claim not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.ClaimController.DeleteClaimById(System.Int64)">
            <summary>
                Deletes a claim by its id.
            </summary>
            <param name="claimId">
                The claim identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Deletes a claim by its id.
            </remarks>
            <response code="200">Claim deleted.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.ControllerBaseExtensions">
            <summary>
                Some extension methods for the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase"></see> class.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.ControllerBaseExtensions.InternalServerError(Microsoft.AspNetCore.Mvc.ControllerBase,System.Exception)">
            <summary>
                Returns a 500 internal server error.
            </summary>
            <param name="controllerBase">The controller base.</param>
            <param name="ex">The exception.</param>
            <returns>A <seealso cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" />.</returns>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.ControllerBaseExtensions.InternalServerError(Microsoft.AspNetCore.Mvc.ControllerBase,System.Collections.Generic.IEnumerable{NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.IdentityErrorExt})">
            <summary>
                Returns a 500 internal server error.
            </summary>
            <param name="controllerBase">The controller base.</param>
            <param name="identityErrors">The identity errors.</param>
            <returns>A <seealso cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" />.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.IdentityErrorExt">
            <summary>
                Some extension methods for the <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"></see> class.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.IdentityErrorExt.#ctor(Microsoft.AspNetCore.Identity.IdentityError)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.IdentityErrorExt" /> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.Extensions.IdentityErrorExt.ToString">
            <summary>
                Converts the <seealso cref="T:Microsoft.AspNetCore.Identity.IdentityError" /> to a <seealso cref="T:System.String" /> value.
            </summary>
            <returns>A <seealso cref="T:System.String" /> value of the <seealso cref="T:Microsoft.AspNetCore.Identity.IdentityError" />.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.Controllers.UserController">
            <summary>
                The user controller class.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.autoMapper">
            <summary>
                The auto mapper.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.databaseContext">
            <summary>
                The database context.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.passwordHasher">
            <summary>
                The password hasher.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.userManager">
            <summary>
                The user manager.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.#ctor(Storage.MqttContext,Microsoft.AspNetCore.Identity.UserManager{Storage.Database.User},AutoMapper.IMapper)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleIdentityConfig.Controllers.UserController" /> class.
            </summary>
            <param name="databaseContext">The database context.</param>
            <param name="userManager">The user manager.</param>
            <param name="autoMapper">The auto mapper service.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.GetUsers">
            <summary>
                Gets all users.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets all users.
            </remarks>
            <response code="200">Users found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.GetUserById(System.Int64)">
            <summary>
                Gets a user by their id.
            </summary>
            <param name="userId">
                The user identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets a user by their id.
            </remarks>
            <response code="200">User found.</response>
            <response code="404">User not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.CreateUser(Storage.Dto.DtoCreateUpdateUser)">
            <summary>
                Creates a user.
            </summary>
            <param name="createUser">
                The create user.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Creates a user.
            </remarks>
            <response code="200">User created.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.UpdateUser(System.Int64,Storage.Dto.DtoCreateUpdateUser)">
            <summary>
                Updates a user.
            </summary>
            <param name="userId">
                The user identifier.
            </param>
            <param name="updateUser">
                The update user.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Updates a user.
            </remarks>
            <response code="200">User updated.</response>
            <response code="404">User not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Controllers.UserController.DeleteUserById(System.Int64)">
            <summary>
                Deletes the user by their id.
            </summary>
            <param name="userId">
                The user identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Deletes a user by their id.
            </remarks>
            <response code="200">User deleted.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.DateTimeExtensions">
            <summary>
            A class that contains extension method for the <see cref="T:System.DateTime"/> data type.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.DateTimeExtensions.GetTimeZoneOffset(System.DateTime)">
            <summary>
            Gets the time zone offset of the local time zone.
            </summary>
            <param name="date">The date to get the time zone offset from.</param>
            <returns>The time zone offset of the local time zone</returns>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.DateTimeOffsetExtensions">
            <summary>
            A class that contains extension method for the <see cref="T:System.DateTimeOffset"/> data type.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.DateTimeOffsetExtensions.EndOfCurrentMonth(System.DateTimeOffset)">
            <summary>
            Gets the end of the current month.
            </summary>
            <param name="date">The date to get the current month end from.</param>
            <returns>A new <see cref="T:System.DateTimeOffset"/> that represents the end of the current month.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.Program">
            <summary>
                The main program class.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Program.Main(System.String[])">
            <summary>
                Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Program.CreateWebHostBuilder(System.String[])">
            <summary>
                Creates the web host builder.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleIdentityConfig.Startup">
            <summary>
                The startup class.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Startup.Hasher">
            <summary>
                The <see cref="T:Microsoft.AspNetCore.Identity.PasswordHasher`1" />.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Startup.DataLimitCacheMonth">
            <summary>
            Gets or sets the data limit cache for throttling for monthly data.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleIdentityConfig.Startup.databaseContext">
            <summary>
                The database context.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleIdentityConfig.Startup" /> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:NetCoreMQTTExampleIdentityConfig.Startup.Configuration">
            <summary>
                Gets the configuration.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
                Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.GetClientIdPrefix(System.String)">
            <summary>
                Gets the client id prefix for a client id if there is one or <c>null</c> else.
            </summary>
            <param name="clientId">The client id.</param>
            <returns>The client id prefix for a client id if there is one or <c>null</c> else.</returns>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.LogMessage(MQTTnet.Server.MqttSubscriptionInterceptorContext,System.Boolean)">
            <summary> 
                Logs the message from the MQTT subscription interceptor context. 
            </summary> 
            <param name="context">The MQTT subscription interceptor context.</param> 
            <param name="successful">A <see cref="T:System.Boolean"/> value indicating whether the subscription was successful or not.</param> 
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.LogMessage(MQTTnet.Server.MqttApplicationMessageInterceptorContext)">
            <summary>
                Logs the message from the MQTT message interceptor context.
            </summary>
            <param name="context">The MQTT message interceptor context.</param>
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.LogMessage(MQTTnet.Server.MqttConnectionValidatorContext,System.Boolean)">
            <summary> 
                Logs the message from the MQTT connection validation context. 
            </summary> 
            <param name="context">The MQTT connection validation context.</param> 
            <param name="showPassword">A <see cref="T:System.Boolean"/> value indicating whether the password is written to the log or not.</param> 
        </member>
        <member name="M:NetCoreMQTTExampleIdentityConfig.Startup.IsUserThrottled(System.String,System.Int64,System.Int64)">
            <summary>
            Checks whether a user has used the maximum of its publishing limit for the month or not.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="sizeInBytes">The message size in bytes.</param>
            <param name="monthlyByteLimit">The monthly byte limit.</param>
            <returns>A value indicating whether the user will be throttled or not.</returns>
        </member>
    </members>
</doc>
